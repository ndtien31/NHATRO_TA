import streamlit as st
import pandas as pd
import gspread
import os
import pyzipper
import tempfile
from oauth2client.service_account import ServiceAccountCredentials

# --- C·∫§U H√åNH ---
ZIP_FILE_PATH = "secret_key.zip"  # File ZIP ch·ª©a credentials JSON

# --- GIAO DI·ªÜN ---
st.set_page_config(page_title="Qu·∫£n l√Ω nh√† tr·ªç - Google Sheet", layout="centered")
st.title("üìÑ ·ª®ng d·ª•ng qu·∫£n l√Ω nh√† tr·ªç k·∫øt n·ªëi Google Sheet")

# --- Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i n√©n file zip ---
st.subheader("üîê Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i n√©n file key:")
zip_password = st.text_input("M·∫≠t kh·∫©u ZIP", type="password")

creds = None

if zip_password:
    with tempfile.TemporaryDirectory() as tmpdir:
        try:
            # Gi·∫£i n√©n file ZIP
            with pyzipper.AESZipFile(ZIP_FILE_PATH, 'r') as zip_ref:
                zip_ref.pwd = zip_password.encode()
                zip_ref.extractall(path=tmpdir)

            # T√¨m file JSON trong th∆∞ m·ª•c t·∫°m
            json_files = [f for f in os.listdir(tmpdir) if f.endswith(".json")]
            if not json_files:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y file .json trong file ZIP.")
            else:
                json_path = os.path.join(tmpdir, json_files[0])
                scope = [
                    "https://spreadsheets.google.com/feeds",
                    "https://www.googleapis.com/auth/drive"
                ]
                creds = ServiceAccountCredentials.from_json_keyfile_name(json_path, scope)
                client = gspread.authorize(creds)
                st.success("‚úÖ ƒê√£ gi·∫£i n√©n v√† k·∫øt n·ªëi th√†nh c√¥ng!")

                # --- Nh·∫≠p URL Google Sheet ---
                sheet_url = st.text_input("üîó D√°n link Google Sheet t·∫°i ƒë√¢y:",
                    "https://docs.google.com/spreadsheets/d/1AxkWZAumRsyW8TkxK3-47SrkyoD8mDZKMuaCZ5ebONk/edit#gid=0")

                def load_data():
                    try:
                        sheet = client.open_by_url(sheet_url).sheet1
                        records = sheet.get_all_records()
                        return pd.DataFrame(records), sheet
                    except Exception as e:
                        st.error("‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ Google Sheet.")
                        st.exception(e)
                        return pd.DataFrame(), None

                st.subheader("‚ûï Nh·∫≠p d·ªØ li·ªáu m·ªõi v√†o Sheet")
                with st.form("add_form"):
                    col1, col2 = st.columns(2)
                    with col1:
                        room = st.text_input("Ph√≤ng")
                        name = st.text_input("H·ªç t√™n")
                    with col2:
                        phone = st.text_input("SƒêT")
                        note = st.text_input("Ghi ch√∫")
                    submitted = st.form_submit_button("üì§ Ghi v√†o Sheet")
                    if submitted:
                        df, sheet = load_data()
                        if sheet:
                            try:
                                sheet.append_row([room, name, phone, note])
                                st.success("‚úÖ Ghi d·ªØ li·ªáu th√†nh c√¥ng!")
                                st.experimental_rerun()
                            except Exception as e:
                                st.error(f"‚ùå Kh√¥ng ghi ƒë∆∞·ª£c: {e}")

                st.subheader("üì• D·ªØ li·ªáu hi·ªán t·∫°i:")
                df, sheet = load_data()
                if not df.empty:
                    st.dataframe(df, use_container_width=True)

                    st.subheader("üõ†Ô∏è Qu·∫£n l√Ω d·ªØ li·ªáu (CRUDS)")
                    selected_index = st.selectbox("Ch·ªçn d√≤ng ƒë·ªÉ s·ª≠a ho·∫∑c x√≥a", df.index, format_func=lambda x: f"Ph√≤ng: {df.iloc[x]['Ph√≤ng']}")

                    with st.expander("‚úèÔ∏è S·ª≠a d√≤ng"):
                        with st.form("edit_form"):
                            col1, col2 = st.columns(2)
                            with col1:
                                new_room = st.text_input("Ph√≤ng", df.iloc[selected_index]["Ph√≤ng"])
                                new_name = st.text_input("H·ªç t√™n", df.iloc[selected_index]["H·ªç t√™n"])
                            with col2:
                                new_phone = st.text_input("SƒêT", df.iloc[selected_index]["SƒêT"])
                                new_note = st.text_input("Ghi ch√∫", df.iloc[selected_index]["Ghi ch√∫"])

                            if st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi"):
                                try:
                                    sheet.update(f"A{selected_index+2}:D{selected_index+2}", [[new_room, new_name, new_phone, new_note]])
                                    st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!")
                                    st.experimental_rerun()
                                except Exception as e:
                                    st.error(f"‚ùå Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c: {e}")

                    with st.expander("üóëÔ∏è Xo√° d√≤ng"):
                        if st.button("‚ùå Xo√° d√≤ng ƒë√£ ch·ªçn"):
                            try:
                                sheet.delete_rows(selected_index + 2)
                                st.success("‚úÖ ƒê√£ xo√° d√≤ng th√†nh c√¥ng!")
                                st.experimental_rerun()
                            except Exception as e:
                                st.error(f"‚ùå Kh√¥ng xo√° ƒë∆∞·ª£c: {e}")

                    with st.expander("üîç T√¨m ki·∫øm"):
                        keyword = st.text_input("üîé Nh·∫≠p t·ª´ kho√° (t√™n, s·ªë ƒëi·ªán tho·∫°i, ghi ch√∫,...):")
                        if keyword:
                            filtered_df = df[df.apply(lambda row: keyword.lower() in str(row).lower(), axis=1)]
                            st.dataframe(filtered_df if not filtered_df.empty else "‚õî Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.")
                else:
                    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng th·ªÉ t·∫£i.")

        except RuntimeError:
            st.error("‚ùå M·∫≠t kh·∫©u ZIP sai ho·∫∑c file l·ªói.")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi gi·∫£i n√©n ho·∫∑c ƒë·ªçc key: {e}")
