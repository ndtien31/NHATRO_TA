# Streamlit App Qu·∫£n L√Ω Nh√† Tr·ªç v·ªõi Google Sheet v√† CRUDS + nh·∫≠p ch·ªâ s·ªë m·ªõi
import streamlit as st
import pandas as pd
import gspread
import os
import pyzipper
import tempfile
from oauth2client.service_account import ServiceAccountCredentials

# --- H√ÄM CHUY·ªÇN S·ªê C·ªòT SANG CH·ªÆ EXCEL (A, B, ..., Z, AA, AB, ...) ---
def colnum_to_excel_col(n):
    name = ''
    while n > 0:
        n, r = divmod(n - 1, 26)
        name = chr(65 + r) + name
    return name

# --- C·∫§U H√åNH ---
ZIP_FILE_PATH = "secret_key.zip"

# --- GIAO DI·ªÜN ---
st.set_page_config(page_title="Qu·∫£n l√Ω nh√† tr·ªç - Google Sheet", layout="centered")
st.title("üìÑ ·ª®ng d·ª•ng qu·∫£n l√Ω nh√† tr·ªç k·∫øt n·ªëi Google Sheet")

st.subheader("üîê Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i n√©n file key:")
zip_password = st.text_input("M·∫≠t kh·∫©u ZIP", type="password")

creds = None

if zip_password:
    with tempfile.TemporaryDirectory() as tmpdir:
        try:
            with pyzipper.AESZipFile(ZIP_FILE_PATH, 'r') as zip_ref:
                zip_ref.pwd = zip_password.encode()
                zip_ref.extractall(path=tmpdir)

            json_files = [f for f in os.listdir(tmpdir) if f.endswith(".json")]
            if not json_files:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y file .json trong file ZIP.")
            else:
                json_path = os.path.join(tmpdir, json_files[0])
                scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(json_path, scope)
                client = gspread.authorize(creds)
                st.success("‚úÖ ƒê√£ gi·∫£i n√©n v√† k·∫øt n·ªëi th√†nh c√¥ng!")

                sheet_url = st.text_input("üîó D√°n link Google Sheet t·∫°i ƒë√¢y:",
                    "https://docs.google.com/spreadsheets/d/1AxkWZAumRsyW8TkxK3-47SrkyoD8mDZKMuaCZ5ebONk/edit#gid=0")

                def load_data():
                    try:
                        sheet = client.open_by_url(sheet_url).sheet1
                        records = sheet.get_all_records()
                        return pd.DataFrame(records), sheet
                    except Exception as e:
                        st.error("‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ Google Sheet.")
                        st.exception(e)
                        return pd.DataFrame(), None

                st.subheader("üì• D·ªØ li·ªáu hi·ªán t·∫°i:")
                df, sheet = load_data()
                if not df.empty:
                    selected_row = st.selectbox("üìù Ch·ªçn d√≤ng ƒë·ªÉ ch·ªânh s·ª≠a, xo√° ho·∫∑c t·∫°o m·ªõi t·ª´ d√≤ng n√†y:", df.index, format_func=lambda i: f"Ph√≤ng: {df.iloc[i]['S·ªë ph√≤ng']} - Kh√°ch: {df.iloc[i]['H·ªç t√™n kh√°ch thu√™']}")
                    selected_data = df.iloc[selected_row]

                    with st.expander("‚úèÔ∏è Ch·ªânh s·ª≠a d√≤ng ƒë√£ ch·ªçn"):
                        with st.form("edit_form"):
                            edited_row = {}
                            for col in df.columns:
                                edited_row[col] = st.text_input(col, value=str(selected_data[col]))
                            update_btn = st.form_submit_button("‚úÖ C·∫≠p nh·∫≠t d√≤ng")
                            delete_btn = st.form_submit_button("üóëÔ∏è Xo√° d√≤ng")

                        if update_btn:
                            try:
                                col_count = len(edited_row)
                                end_col_letter = colnum_to_excel_col(col_count)
                                sheet.update(f"A{selected_row+2}:{end_col_letter}{selected_row+2}", [list(edited_row.values())])
                                st.success("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}")

                        if delete_btn:
                            try:
                                sheet.delete_rows(selected_row + 2)
                                st.success("üóëÔ∏è ƒê√£ xo√° d√≤ng!")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå L·ªói khi xo√°: {e}")

                    with st.expander("‚ûï Th√™m d√≤ng m·ªõi t·ª´ d√≤ng ƒë√£ ch·ªçn"):
                        with st.form("duplicate_form"):
                            new_row = {}
                            for col in df.columns:
                                default = str(selected_data[col]) if "THANG" not in col else ""
                                new_row[col] = st.text_input(f"{col}", value=default)
                            if st.form_submit_button("üì• Th√™m d√≤ng m·ªõi"):
                                try:
                                    sheet.append_row(list(new_row.values()))
                                    st.success("‚úÖ ƒê√£ th√™m d√≤ng m·ªõi t·ª´ d·ªØ li·ªáu c≈©!")
                                    st.rerun()
                                except Exception as e:
                                    st.error(f"‚ùå Kh√¥ng th√™m ƒë∆∞·ª£c: {e}")

                    # --- Nh·∫≠p ch·ªâ s·ªë m·ªõi ---
                    st.subheader("‚ö° Nh·∫≠p ch·ªâ s·ªë ƒëi·ªán n∆∞·ªõc m·ªõi")
                    phong_list = df['S·ªë ph√≤ng'].unique().tolist()
                    selected_phong = st.selectbox("Ch·ªçn s·ªë ph√≤ng", phong_list)

                    df_phong = df[df['S·ªë ph√≤ng'] == selected_phong].copy()
                    try:
                        df_phong['THANG_sort'] = pd.to_datetime(df_phong['THANG'], errors='coerce')
                        df_phong = df_phong.sort_values(by='THANG_sort', ascending=False)
                    except:
                        df_phong = df_phong.sort_values(by='THANG', ascending=False)

                    row_to_update = df_phong[df_phong['Ch·ªâ s·ªë ƒëi·ªán m·ªõi'].isna() | df_phong['Ch·ªâ s·ªë ƒëi·ªán m·ªõi'].eq("")].head(1)

                    if row_to_update.empty:
                        st.info("‚úÖ Kh√¥ng c√≥ d√≤ng n√†o c·∫ßn nh·∫≠p ch·ªâ s·ªë m·ªõi cho ph√≤ng n√†y.")
                    else:
                        idx = row_to_update.index[0]
                        row_data = df.loc[idx]
                        st.write(f"D√≤ng c·∫ßn c·∫≠p nh·∫≠t - THANG: {row_data['THANG']}")
                        with st.form("nhap_chiso_moi"):
                            chisodienmoi = st.number_input("Ch·ªâ s·ªë ƒëi·ªán m·ªõi", min_value=0, value=0)
                            chisonuocmoi = st.number_input("Ch·ªâ s·ªë n∆∞·ªõc m·ªõi", min_value=0, value=0)
                            capnhat_btn = st.form_submit_button("üíæ C·∫≠p nh·∫≠t")
                            if capnhat_btn:
                                try:
                                    df.at[idx, 'Ch·ªâ s·ªë ƒëi·ªán m·ªõi'] = chisodienmoi
                                    df.at[idx, 'Ch·ªâ s·ªë n∆∞·ªõc m·ªõi'] = chisonuocmoi
                                    col_count = len(df.columns)
                                    end_col_letter = colnum_to_excel_col(col_count)
                                    sheet.update(f"A{idx+2}:{end_col_letter}{idx+2}", [df.iloc[idx].tolist()])
                                    st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ch·ªâ s·ªë m·ªõi!")
                                    st.rerun()
                                except Exception as e:
                                    st.error(f"‚ùå Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c: {e}")

                    st.dataframe(df, use_container_width=True)

                else:
                    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng th·ªÉ t·∫£i.")

        except RuntimeError:
            st.error("‚ùå M·∫≠t kh·∫©u ZIP sai ho·∫∑c file l·ªói.")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi gi·∫£i n√©n ho·∫∑c ƒë·ªçc key: {e}")
