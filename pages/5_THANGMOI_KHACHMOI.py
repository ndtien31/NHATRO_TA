# Streamlit App Qu·∫£n L√Ω Nh√† Tr·ªç v·ªõi Google Sheet v√† CRUDS + nh·∫≠p ch·ªâ s·ªë m·ªõi + t·ª± ƒë·ªông t·∫°o d√≤ng th√°ng m·ªõi
import streamlit as st
import pandas as pd
import gspread
import os
import pyzipper
import tempfile
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta

# --- H√ÄM CHUY·ªÇN S·ªê C·ªòT SANG CH·ªÆ EXCEL (A, B, ..., Z, AA, AB, ...) ---
def colnum_to_excel_col(n):
    name = ''
    while n > 0:
        n, r = divmod(n - 1, 26)
        name = chr(65 + r) + name
    return name

# --- C·∫§U H√åNH ---
ZIP_FILE_PATH = "secret_key.zip"

# --- GIAO DI·ªÜN ---
st.set_page_config(page_title="Qu·∫£n l√Ω nh√† tr·ªç - Google Sheet", layout="centered")
st.title("üìÑ ·ª®ng d·ª•ng qu·∫£n l√Ω nh√† tr·ªç k·∫øt n·ªëi Google Sheet")

st.subheader("üîê Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ gi·∫£i n√©n file key:")
zip_password = st.text_input("M·∫≠t kh·∫©u ZIP", type="password")

creds = None

if zip_password:
    with tempfile.TemporaryDirectory() as tmpdir:
        try:
            with pyzipper.AESZipFile(ZIP_FILE_PATH, 'r') as zip_ref:
                zip_ref.pwd = zip_password.encode()
                zip_ref.extractall(path=tmpdir)

            json_files = [f for f in os.listdir(tmpdir) if f.endswith(".json")]
            if not json_files:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y file .json trong file ZIP.")
            else:
                json_path = os.path.join(tmpdir, json_files[0])
                scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(json_path, scope)
                client = gspread.authorize(creds)
                st.success("‚úÖ ƒê√£ gi·∫£i n√©n v√† k·∫øt n·ªëi th√†nh c√¥ng!")

                sheet_url = st.text_input("üîó D√°n link Google Sheet t·∫°i ƒë√¢y:",
                    "https://docs.google.com/spreadsheets/d/1AxkWZAumRsyW8TkxK3-47SrkyoD8mDZKMuaCZ5ebONk/edit#gid=0")

                def load_data():
                    try:
                        sheet = client.open_by_url(sheet_url).sheet1
                        records = sheet.get_all_records()
                        return pd.DataFrame(records), sheet
                    except Exception as e:
                        st.error("‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ Google Sheet.")
                        st.exception(e)
                        return pd.DataFrame(), None

                st.subheader("üì• D·ªØ li·ªáu hi·ªán t·∫°i:")
                df, sheet = load_data()
                if not df.empty:
                    selected_row = st.selectbox("üìù Ch·ªçn d√≤ng ƒë·ªÉ ch·ªânh s·ª≠a, xo√° ho·∫∑c t·∫°o m·ªõi t·ª´ d√≤ng n√†y:", df.index, format_func=lambda i: f"Ph√≤ng: {df.iloc[i]['S·ªë ph√≤ng']} - Kh√°ch: {df.iloc[i]['H·ªç t√™n kh√°ch thu√™']}")
                    selected_data = df.iloc[selected_row]
                    with st.expander("‚ûï Th√™m d√≤ng m·ªõi t·ª´ d√≤ng ƒë√£ ch·ªçn"):
                        with st.form("duplicate_form"):
                            new_row = {}
                            for col in df.columns:
                                default = str(selected_data[col]) if "THANG" not in col else ""
                                new_row[col] = st.text_input(f"{col}", value=default)
                            if st.form_submit_button("üì• Th√™m d√≤ng m·ªõi"):
                                try:
                                    sheet.append_row([str(v) for v in new_row.values()])
                                    st.success("‚úÖ ƒê√£ th√™m d√≤ng m·ªõi t·ª´ d·ªØ li·ªáu c≈©!")
                                    st.rerun()
                                except Exception as e:
                                    st.error(f"‚ùå Kh√¥ng th√™m ƒë∆∞·ª£c: {e}")
                    # --- T·∫°o d√≤ng m·ªõi cho th√°ng k·∫ø ti·∫øp n·∫øu ch∆∞a c√≥ ---
                    st.subheader("üìÜ T·∫°o d√≤ng m·ªõi cho th√°ng k·∫ø ti·∫øp")
                    if st.button("‚ûï T·∫°o d·ªØ li·ªáu th√°ng m·ªõi"):
                        try:
                            df['THANG_date'] = pd.to_datetime(df['THANG'], errors='coerce')
                            latest_rows = df.sort_values('THANG_date').groupby('S·ªë ph√≤ng').tail(1)

                            new_rows = []
                            for _, row in latest_rows.iterrows():
                                new_row = row.copy()
                                if pd.isna(new_row['THANG_date']):
                                    continue
                                next_month = new_row['THANG_date'] + pd.DateOffset(months=1)
                                new_row['THANG'] = next_month.strftime("%Y-%m")
                                for col in ['Ch·ªâ s·ªë ƒëi·ªán m·ªõi', 'Ch·ªâ s·ªë n∆∞·ªõc m·ªõi', 'ƒê√£ thanh to√°n', 'Ng√†y thanh to√°n', 'S·ªë ti·ªÅn ƒë√£ tr·∫£', 'H√¨nh th·ª©c thanh to√°n', 'Ti·ªÅn ƒëi·ªán', 'Ti·ªÅn n∆∞·ªõc', 'T·ªïng c·ªông']:
                                    if col in new_row:
                                        new_row[col] = ""
                                new_rows.append([str(x) for x in new_row[df.columns].tolist()])

                            if new_rows:
                                sheet.append_rows(new_rows)
                                st.success(f"‚úÖ ƒê√£ t·∫°o {len(new_rows)} d√≤ng m·ªõi cho th√°ng k·∫ø ti·∫øp.")
                                st.rerun()
                            else:
                                st.warning("‚õî Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ t·∫°o d√≤ng m·ªõi.")

                        except Exception as e:
                            st.error(f"‚ùå L·ªói khi t·∫°o d√≤ng m·ªõi: {e}")

                    st.dataframe(df, use_container_width=True)

                else:
                    st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng th·ªÉ t·∫£i.")

        except RuntimeError:
            st.error("‚ùå M·∫≠t kh·∫©u ZIP sai ho·∫∑c file l·ªói.")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi gi·∫£i n√©n ho·∫∑c ƒë·ªçc key: {e}")
